plugins {
    id 'java-library'
    id 'java-conventions'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'org.flywaydb.flyway' version '9.8.1'
}

group = 'com.kaua.ecommerce.infrastructure'

repositories {
    mavenCentral()
}

dependencies {
    implementation(project(":domain"))
    implementation(project(":application"))

    implementation 'mysql:mysql-connector-java:8.0.33'

    implementation('org.springframework.boot:spring-boot-starter-web:3.1.4') {
        exclude module: 'spring-boot-starter-tomcat'
    }
    implementation 'org.springframework.boot:spring-boot-starter-undertow:3.1.4'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.1.4'
    implementation 'org.springframework.boot:spring-boot-starter-amqp:3.1.4'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.0.3'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis:3.1.4'

    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'

    implementation('org.yaml:snakeyaml:2.0') {
        version { strictly("2.0")}
    }

    implementation 'com.fasterxml.jackson.module:jackson-module-afterburner:2.15.3'

    implementation 'com.googlecode.libphonenumber:libphonenumber:8.13.12'

    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.1.4'
    testImplementation 'org.springframework.amqp:spring-rabbit-test:3.0.10'

    testRuntimeOnly 'com.h2database:h2'

    testImplementation(project(path: ':domain', configuration: 'testClasses'))

    testImplementation 'org.testcontainers:testcontainers-bom:1.18.3'
    testImplementation 'org.testcontainers:junit-jupiter:1.18.3'
}

flyway {
    url = 'jdbc:mysql://' + System.getenv('DATABASE_MYSQL_URL') + '/ecommerce' ?: 'jdbc:mysql://localhost:3306/ecommerce'
    user = System.getenv('DATABASE_MYSQL_USERNAME') ?: 'root'
    password = System.getenv('DATABASE_MYSQL_PASSWORD') ?: '123456'
}

testCodeCoverageReport {
    dependsOn(test)

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: [
                            'com/kaua/ecommerce/infrastructure/configurations/*',
                            'com/kaua/ecommerce/infrastructure/Main.class'
                    ])
                })
        )
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: [
                            'com/kaua/ecommerce/infrastructure/configurations/*',
                            'com/kaua/ecommerce/infrastructure/Main.class'
                    ])
                })
        )
    }
}